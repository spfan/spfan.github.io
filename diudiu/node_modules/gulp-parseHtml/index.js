//  ┏┓　　　┏┓
//┏┛┻━━━┛┻┓
//┃　　　　　　　┃
//┃　　　━　　　┃
//┃　┳┛　┗┳　┃
//┃　　　　　　　┃
//┃　　　┻　　　┃
//┃　　　　　　　┃
//┗━┓　　　┏━┛
//    ┃　　　┃ 神兽保佑
//    ┃　　　┃ 代码无BUG！
//    ┃　　　┗━━━┓
//    ┃　　　　　　　┣┓
//    ┃　　　　　　　┏┛
//    ┗┓┓┏━┳┓┏┛
//      ┃┫┫　┃┫┫
//      ┗┻┛　┗┻┛

var fs = require('fs');
var path = require('path');
var through = require('through2');
var gulp = require('gulp')

var PLUGIN_NAME = "parseHtml";


var that = module.exports = parseHtml;
var releaseBase = path.normalize('./dist');
var prefix = '';
var fileMapArr = [];

that.mapPicker = function(file){
	// fileMapArr.push(path.join(releaseBase, path.relative('../../src', file)));
	fileMapArr.push( file );
}
that.fileMapArr = fileMapArr;

function parseHtml(base, cdnPath){
	if(cdnPath.indexOf('http://')>-1){
		prefix = 'http://';
		cdnPath = cdnPath.replace('http://',''); //window下会有干扰
	}
	return through.obj({highWaterMark: 100}, function (file, enc, callback) {
		if (file.isNull()) {
			return callback(null, file);
		}

		if (file.isStream()) {
			this.emit('error', new gutil.PluginError(PLUGIN_NAME, 'Streaming not supported'));
			return callback();
		}
		var fileContents = file.contents.toString();
		base = base || file.base;
		//console.log(base)
		//添加inline code
		// fileContents = inlineCss(fileContents);
		//添加inline code
		fileContents = replaceCode(fileContents, base)

		//替换script md5路径
		fileContents = replaceScript(fileContents, base, cdnPath)

		file.contents = new Buffer(fileContents);
		callback(null, file);
	});
};

function inlineCss(fileContents){
	return fileContents.replace(/<link[^>]+href="(\S+)"[^>]*>/g, function(a, b, c, d){
		/*if(b){
			return download('http:' + b, function(content){
				console.log(content)
				return '<style>\n' + content + '\n</style>';
			})
		}*/
		return a;
	});
}
function replaceCode(fileContents, base){
	return fileContents.replace(/<script[^>]+src="(\S+)\?(?:\S*)__inline(?:\S*)"[^>]*><\/script>/g, function(a, b, c, d){
		var relaceP = b.replace(/(\.\.\/)+/g, "./");

		var fp = path.join(base, relaceP);
		if(fp){
			return '<script type="text/javascript">\n' + getFileForLc(fp) + '\n</script>';
		}
		return a;
	});
}


function replaceScript(fileContents, base, cdnPath){
	return fileContents.replace(/<script[^>]+src="(\S+)"[^>]*><\/script>|<ltag[^>]+src="(\S+)"[^>]*><\/ltag>/g,function(a, b, c, d){
		b = b || c;
		debugger;
		if(b.indexOf("http://")==0){
			return a;
		}
		if(b.indexOf("//")==0){
			return a;
		}
		// hack js资源当有多层路径
		var relaceP = b.replace(/(\.\.\/)+/g, "./");
		var fp = path.join(base, relaceP);
		if(fp){
			var p = path.relative(releaseBase, getFileForLc(fp, 1));
			pickUsedFile(p);
			if(cdnPath){
				p = prefix + cdnPath + p + getFileSuffix(fp);

			}
			return a.replace(b, p.replace(/\\/g,'/'));
			//return '<script src="'+path.relative(base, getFileForLc(fp, 1)).replace(/\\/g,'/')+'" type="text/javascript" charset="utf-8"></script>';
		}
		console.log('')
		return a;
	});
}

function getFileSuffix(fp){
	var ret = fp.match(/\?(.*?)$/);
    return ret ? ('?' + ret[1] || '') : '';
}

function getFileForLc(fp, useFileName){
	fp = fp.replace(/\?\S+$/, '');
	//console.log(fp)
	//var dir = path.dirname(fp);
	var file  = path.basename(fp);
	var list  = fileMapArr;

	var date  = new Date();
	var year  = date.getFullYear();
	var month = date.getMonth() + 1;
	var day   = date.getDate();
	var dir  = path.normalize('/' + year + month + day);

	for(var i = 0; i < list.length; i++){

		if(path.resolve(list[i].replace(/-[a-zA-Z0-9]{8}\.js$/, ".js")) === path.resolve(fp.replace(/\?.*$/g, '')) ||
			path.resolve(list[i].replace(/-[a-zA-Z0-9]{8}\.js$/, ".js").replace(dir, "")) === path.resolve(fp.replace(/\?.*$/g, ''))){
			// windows下相对路径不靠谱
			console.log('replace success: ' + path.resolve(fp));
			return useFileName ?
				list[i]:
				fs.readFileSync(list[i]).toString();
		}
	}
	return useFileName ? fp: "";
}

var publishArr = [];
function pickUsedFile(path){
	publishArr.push(path.replace(/\\/g,'/'));
	//console.log(path)
}
that.proj = function(){ //maxwell
	var strArr = ['\n[publish]'];
	publishArr.forEach(function(a,i){
		strArr.push(i+1+'='+a)
	})
	//console.log(strArr)
	return through.obj(function (file, enc, callback) {
		if (file.isNull()) {
			return callback(null, file);
		}

		if (file.isStream()) {
			this.emit('error', new gutil.PluginError(PLUGIN_NAME, 'Streaming not supported'));
			return callback();
		}
		var fileContents = file.contents.toString();
		file.contents = new Buffer(fileContents+strArr.join('\n'));
		callback(null, file);
	})
}